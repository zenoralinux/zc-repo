name: Arch Linux Repository Builder

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # روزانه اجرا شود

jobs:
  build-repo:
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
    # مرحله 1: دریافت مخزن
    - name: Checkout repository
      uses: actions/checkout@v4

    # مرحله 2: تنظیم محیط ساخت
    - name: Setup build environment
      run: |
        # حذف بسته‌های مشکل‌ساز
        pacman -Rdd --noconfirm systemd-sysvcompat || true
        
        # نصب بسته‌های ضروری
        pacman -Sy --noconfirm --needed \
          git base-devel pacman-contrib \
          hicolor-icon-theme libayatana-appindicator at-spi2-core \
          fontconfig pango gtk3 ayatana-ido gdk-pixbuf2 \
          libayatana-indicator libdbusmenu-glib cairo harfbuzz libepoxy \
          python python-gobject python-pycountry gtk4 libadwaita meson \
          cmake ninja qt6-base qt6-wayland vulkan-headers libdrm libxcb \
          polkit

    # مرحله 3: نصب yay
    - name: Install yay
      run: |
        useradd -m builder
        echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        sudo -u builder git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        sudo -u builder makepkg -si --noconfirm --skippgpcheck
        rm -rf /tmp/yay

    # مرحله 4: ساخت بسته‌های AUR
    - name: Build AUR packages
      run: |
        cd "$GITHUB_WORKSPACE"
        for pkg in hiddify-app-bin carburetor lact-git oblivion-desktop-bin; do
          sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" "$pkg"
        done

    # مرحله 5: آماده‌سازی مخزن
    - name: Prepare repository
      run: |
        # ایجاد ساختار دایرکتوری
        mkdir -p "$GITHUB_WORKSPACE/repo/x86_64"
        
        # کپی بسته‌ها
        find /tmp -name "*.pkg.tar.zst" -exec cp -v {} "$GITHUB_WORKSPACE/repo/x86_64/" \;
        
        # ایجاد دیتابیس
        cd "$GITHUB_WORKSPACE/repo/x86_64"
        
        # حذف فایل‌های قدیمی
        rm -fv *.db *.files *.db.tar.* *.files.tar.*
        
        # ایجاد دیتابیس جدید
        repo-add -n -v zc-repo.db.tar.gz *.pkg.tar.zst
        
        # ایجاد لینک‌های سمبولیک
        ln -sfv zc-repo.db.tar.gz zc-repo.db
        ln -sfv zc-repo.files.tar.gz zc-repo.files
        
        # بررسی نهایی
        echo "=== محتوای مخزن ==="
        ls -la
        echo "=== خلاصه دیتابیس ==="
        tar -ztvf zc-repo.db.tar.gz | head

    # مرحله 6: آپلود به Codeberg
    - name: Deploy to Codeberg
      env:
        CODEBERG_USER: zenoralinux
        CODEBERG_TOKEN: ${{ secrets.CODEBERG_TOKEN }}
      run: |
        cd "$GITHUB_WORKSPACE/repo"
        
        # تنظیمات Git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global init.defaultBranch main
        
        # مقداردهی اولیه مخزن
        git init
        git checkout -b main
        git add .
        git commit -m "آپدیت خودکار: $(date +'%Y-%m-%d %H:%M')"
        
        # آپلود به Codeberg
        git remote add origin "https://$CODEBERG_USER:$CODEBERG_TOKEN@codeberg.org/$CODEBERG_USER/zc-repo.git"
        git push -f origin main
        
        echo "=== آپلود موفقیت‌آمیز بود ==="
        echo "آدرس مخزن: https://codeberg.org/zenoralinux/zc-repo"
