name: zenora Linux Repository Builder

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily

jobs:
  build-repo:
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Setup build environment
    - name: Setup build environment
      run: |
        pacman -Rdd --noconfirm systemd-sysvcompat || true
        pacman -Sy --noconfirm --needed git base-devel 
        pacman -S --noconfirm --needed \
          hicolor-icon-theme libayatana-appindicator at-spi2-core \
          fontconfig pango gtk3 ayatana-ido gdk-pixbuf2 \
          libayatana-indicator libdbusmenu-glib cairo harfbuzz libepoxy \
          python python-gobject python-pycountry gtk4 libadwaita meson \
          cmake ninja qt6-base qt6-wayland vulkan-headers libdrm libxcb \
          polkit nodejs npm wget \
          qt6-webengine yaml-cpp networkmanager upower \
          kconfig ki18n kservice kwidgetsaddons kpmcore \
          squashfs-tools rsync boost pybind11 doxygen \
          dmidecode gptfdisk hwinfo kparts polkit-qt6 \
          solid qt6-tools libpwquality ckbcomp

    # Step 3: Install yay
    - name: Install yay as builder user
      run: |
        useradd -m builder
        echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        sudo -u builder git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        sudo -u builder makepkg -si --noconfirm --skippgpcheck
        rm -rf /tmp/yay

    # Step 4: Build AUR packages
    - name: Build AUR packages with yay
      run: |
        cd "$GITHUB_WORKSPACE"
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" carburetor
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" bottles
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" Packet
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" google-chrome
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" ascii-draw
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" protonup-qt-bin 
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" hiddify-app-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" oblivion-desktop-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" heroic-games-launcher-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" brisk-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" microsoft-edge-stable-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" gopeed-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" materialgram-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" brave-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" edex-ui-bin
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" zen-browser-bin

        # Build calamares
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" ckbcomp
        sudo -u builder git clone https://github.com/zenoralinux/calamares.git /tmp/calamares
        cd /tmp/calamares
        sudo -u builder makepkg -si --noconfirm --skippgpcheck

    # Step 5: Prepare and sync repository
    - name: Clone Repository
      env:
        CODEBERG_USER: zenoralinux
        CODEBERG_TOKEN: ${{ secrets.CODEBERG_TOKEN }}
      run: |
        # Clean token
        CLEAN_TOKEN=$(echo "$CODEBERG_TOKEN" | tr -d '\n\r\t ')
        
        # Git config
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Clone or initialize repo
        if [ ! -d existing_repo ]; then
          git clone "https://${CODEBERG_USER}:${CLEAN_TOKEN}@codeberg.org/${CODEBERG_USER}/zc-repo.git" existing_repo || \
            { mkdir -p existing_repo/zcrepo/x86_64; cd existing_repo; git init; git remote add origin "https://${CODEBERG_USER}:${CLEAN_TOKEN}@codeberg.org/${CODEBERG_USER}/zc-repo.git"; }
        fi

    - name: Copy x86_64 packages
      run: |
        # Copy new x86_64 packages
        mkdir -p existing_repo/zcrepo/x86_64
        find /tmp -name "*.pkg.tar.zst" -exec cp -f {} existing_repo/zcrepo/x86_64/ \;

        # Rebuild repo database
        cd existing_repo/zcrepo/x86_64
        rm -f zc-repo.db* zc-repo.files*
        repo-add zc-repo.db.tar.gz *.pkg.tar.zst
        mv zc-repo.files.tar.gz zc-repo.files
        mv zc-repo.db.tar.gz zc-repo.db

    - name: Copy aarch64 packages
      run: |
        # Copy new aarch64 packages
        mkdir -p existing_repo/zcrepo/aarch64
        find /tmp -name "*any.pkg.tar.zst" -exec cp -f {} existing_repo/zcrepo/aarch64/ \;
        find /tmp -name "*aarch64.pkg.tar.zst" -exec cp -f {} existing_repo/zcrepo/aarch64/ \;

        # Rebuild repo database
        cd existing_repo/zcrepo/aarch64
        rm -f zc-repo.db* zc-repo.files*
        repo-add zc-repo.db.tar.gz *.pkg.tar.zst
        mv zc-repo.files.tar.gz zc-repo.files
        mv zc-repo.db.tar.gz zc-repo.db

    - name: Push changes
      run: |
        # Commit and push changes
        cd existing_repo
        git add .
        git commit -m "Automated update: $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
        git pull --rebase origin main
        git push origin main

        # Confirm upload
        echo "Repository successfully updated!"
        echo "Access at: https://codeberg.org/zenoralinux/zc-repo/tree/main/zcrepo/"
