name: zenora Linux Repository x86_64 Builder
  
on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # روزانه اجرا شود

jobs:
  build-repo:
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
    # مرحله 1: دریافت مخزن
    - name: Checkout repository
      uses: actions/checkout@v4

    # مرحله 2: تنظیم محیط ساخت
    - name: Setup build environment
      run: |
       sed -i '/^\[core\]/i\
       [archlinuxcn]\
       SigLevel = Never\
       Server = https://repo.archlinuxcn.org/$arch' /etc/pacman.conf

       pacman -Rdd --noconfirm systemd-sysvcompat || true
       pacman -Sy --noconfirm --needed git base-devel
       pacman -S --noconfirm --needed \
       hicolor-icon-theme libayatana-appindicator at-spi2-core \
       fontconfig pango gtk3 ayatana-ido gdk-pixbuf2 \
       libayatana-indicator libdbusmenu-glib cairo harfbuzz libepoxy \
       python python-gobject python-pycountry gtk4 libadwaita meson \
       cmake ninja qt6-base qt6-wayland vulkan-headers libdrm libxcb \
       polkit nodejs npm wget \
       qt6-webengine yaml-cpp networkmanager upower \
       kconfig ki18n kservice kwidgetsaddons kpmcore \
       squashfs-tools rsync boost pybind11 doxygen \
       dmidecode gptfdisk hwinfo kparts polkit-qt6 \
       solid qt6-tools libpwquality archlinuxcn/proton-ge-custom-bin

    # مرحله 3: نصب yay
    - name: Install yay as builder user
      run: |
        useradd -m builder
        echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        sudo -u builder git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        sudo -u builder makepkg -si --noconfirm --skippgpcheck
        rm -rf /tmp/yay

    # مرحله 4: ساخت بسته‌های AUR
    - name: Build AUR packages with yay
      run: |
        cd "$GITHUB_WORKSPACE"
        for pkg in \
          carburetor bottles Packet google-chrome ascii-draw \
          protonup-qt-bin hiddify-app-bin oblivion-desktop-bin \
          heroic-games-launcher-bin brisk-bin microsoft-edge-stable-bin \
          gopeed-bin materialgram-bin brave-bin edex-ui-bin \
          zen-browser-bin ttf-meslo-nerd-font-powerlevel10k \
          zsh-theme-powerlevel10k beeper-v4-bin
        do
          echo "🔧 Building $pkg"
          sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" "$pkg" || echo "❌ Failed to build $pkg"
        done

        # ساخت بسته calamares
        sudo -u builder yay -S --noconfirm --builddir=/tmp --mflags="--skippgpcheck" ckbcomp || echo "❌ Failed to build ckbcomp"
        sudo -u builder git clone https://github.com/zenoralinux/calamares.git /tmp/calamares
        cd /tmp/calamares
        sudo -u builder makepkg -si --noconfirm --skippgpcheck || echo "❌ Failed to build calamares"

        cp /var/cache/pacman/pkg/proton-ge-custom-bin*.tar.zst /tmp
    # مرحله 5: آماده‌سازی و سینک مخزن
    - name: Prepare and Sync Repository
      env:
        CODEBERG_USER: zenoralinux
        CODEBERG_TOKEN: ${{ secrets.CODEBERG_TOKEN }}
      run: |
        # پاکسازی توکن
        CLEAN_TOKEN=$(echo "$CODEBERG_TOKEN" | tr -d '\n\r\t ')
        
        # تنظیمات Git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # کلون کردن مخزن موجود
        cd "$GITHUB_WORKSPACE"
        git clone "https://${CODEBERG_USER}:${CLEAN_TOKEN}@codeberg.org/${CODEBERG_USER}/zc-repo.git" existing_repo || \
          { mkdir -p existing_repo/zcrepo/x86_64; cd existing_repo; git init; }

        # کپی کردن فایل‌های جدید به مسیر جدید x86_64
        mkdir -p existing_repo/zcrepo/x86_64
        find /tmp -name "*.pkg.tar.zst" -exec cp -f {} existing_repo/zcrepo/x86_64/ \;
         # کپی کردن فایل‌های جدید به مسیر جدید aarch64
        mkdir -p existing_repo/zcrepo/aarch64
        find /tmp -name "*aarch64.pkg.tar.zst" -exec cp -f {} existing_repo/zcrepo/aarch64/ \;
        find /tmp -name "*any.pkg.tar.zst" -exec cp -f {} existing_repo/zcrepo/aarch64/ \;

        # ساخت دیتا بیس جدید x86_64
        cd existing_repo/zcrepo/x86_64
        rm -f zc-repo.db* zc-repo.files*
        repo-add zc-repo.db.tar.gz *.pkg.tar.zst
        mv zc-repo.files.tar.gz zc-repo.files
        mv zc-repo.db.tar.gz zc-repo.db
        # ساخت دیتا بیس جدید aarch64
        cd ..
        cd ./aarch64
        rm -f zc-repo.db* zc-repo.files*
        repo-add zc-repo.db.tar.gz *.pkg.tar.zst
        mv zc-repo.files.tar.gz zc-repo.files
        mv zc-repo.db.tar.gz zc-repo.db

        # کامیت و push تغییرات
        cd ../../
        git add .
        git commit -m "Automated update: $(date +'%Y-%m-%d %H:%M:%S')"
        git push origin main

        # تأیید آپلود
        echo "Repository successfully synced!"
        echo "Access at: https://codeberg.org/zenoralinux/zc-repo/tree/main/zcrepo/x86_64" 
        echo "Access at: https://codeberg.org/zenoralinux/zc-repo/tree/main/zcrepo/aarch64" 
